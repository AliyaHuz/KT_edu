package main

import (
	"fmt"
	"strings"
)

func rune_plus(a rune, b rune) rune {
	flag := false
	if a >= 'A' && a <= 'Z' {
		flag = true
	}
	if flag {
		return (a-'A'+b-'a')%26 + 'A'
	} else {
		return (a-'a'+b-'a')%26 + 'a'
	}

}

func rune_minus(a rune, b rune) rune {
	flag := false
	if a >= 'A' && a <= 'Z' {
		flag = true
		a += 32
	}
	c := a - b
	if c >= 0 {
		if flag {
			return c + 'A'
		} else {
			return c + 'a'
		}
	} else {
		if flag {
			return 'Z' + c + 1
		} else {
			return 'z' + c + 1
		}
	}
}

func isLetter(a rune) bool {
	return ((a >= 'a') && (a <= 'z')) || ((a >= 'A') && (a <= 'Z'))
}

func shift(config []rune, config_0 []rune) {
	if config[0] == 'z' {
		config[0] = 'a'
	} else {
		config[0]++
	}
	if config[0] == config_0[0] {
		if config[1] == 'z' {
			config[1] = 'a'
		} else {
			config[1]++
		}
		if config[1] == config_0[1] {
			if config[2] == 'z' {
				config[2] = 'a'
			} else {
				config[2]++
			}
		}
	}
}

func preproc(i int, a rune, config []rune, flag bool) rune {
	if flag {
		if i == 0 {
			return rune_plus(a, config[0])
		} else if i == 1 {
			return rune_plus(a, rune_minus(config[1], config[0]))
		} else if i == 2 {
			return rune_plus(a, rune_minus(config[2], config[1]))
		} else {
			return rune_minus(a, config[2])
		}
	} else {
		if i == 0 {
			return rune_minus(a, config[0])
		} else if i == 1 {
			return rune_minus(a, rune_minus(config[1], config[0]))
		} else if i == 2 {
			return rune_minus(a, rune_minus(config[2], config[1]))
		} else {
			return rune_plus(a, config[2])
		}
	}
}

func encryption(i int, a rune, flag bool) rune {
	if flag {
		if i == 0 {
			return rune_plus(a, 'b')
		} else if i == 1 {
			return rune_plus(a, 'c')
		} else {
			return rune_plus(a, 'd')
		}
	} else {
		if i == 0 {
			return rune_minus(a, 'b')
		} else if i == 1 {
			return rune_minus(a, 'c')
		} else {
			return rune_minus(a, 'd')
		}
	}
}

func refl(a rune) rune {
	flag := false
	if a >= 'A' && a <= 'Z' {
		flag = true
		a += 32
	}
	if flag {
		return rune_minus('z', a) - 32
	} else {
		return rune_minus('z', a)
	}
}

func main() {
	var str string
	fmt.Println("Введите начальную конфигурацию трех роторов")
	fmt.Scan(&str)
	config_0 := []rune(strings.ToLower(str))
	//fmt.Printf("%c, %c", config_0[0], config_0[1])
	config := make([]rune, len(config_0))
	copy(config, config_0)

	fmt.Println("Введите строку для шифрования")
	fmt.Scan(&str)
	s := []rune(str)

	res := ' '
	fmt.Print("Результат шифрования: ")
	for c := range s {
		res = rune(s[c])

		if !isLetter(res) {
			fmt.Print(string(res))
			continue
		}

		shift(config, config_0)

		for i := 0; i < 3; i++ {
			res = encryption(i, preproc(i, res, config, true), true)
		}
		res = preproc(3, res, config, true)

		res = refl(res)

		res = preproc(3, res, config, false)

		for i := 2; i >= 0; i-- {
			res = preproc(i, encryption(i, res, false), config, false)
		}

		fmt.Print(string(res))
	}
}
